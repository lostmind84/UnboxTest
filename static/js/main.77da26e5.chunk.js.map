{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","numberToSet","whitelist","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","WhitelistContract","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","getAddresses","call","value","send","from","btnSetClick","set","changeNumberToSet","e","target","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77da26e5.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Table from \"react-bootstrap/Table\";\nimport WhitelistContract from \"./contracts/Whitelist.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    numberToSet: 0,\n    whitelist: [],\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = WhitelistContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        WhitelistContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      //instance.events.onSetChange(null, this.setChangeEventCallback);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async () => {\n    const { accounts, contract } = this.state;\n\n    // récupérer la liste des comptes autorisés\n    const whitelist = await contract.methods.getAddresses().call();\n    // Mettre à jour le state\n    this.setState({ whitelist: whitelist });\n  };\n\n  whitelist = async () => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n\n    // Interaction avec le smart contract pour ajouter un compte\n    await contract.methods.whitelist(address).send({ from: accounts[0] });\n    // Récupérer la liste des comptes autorisés\n    this.runInit();\n  };\n\n  btnSetClick = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods\n      .set(this.state.numberToSet)\n      .send({ from: accounts[0] });\n  };\n\n  changeNumberToSet = async (e) => {\n    this.setState({\n      numberToSet: e.target.value,\n    });\n  };\n\n  render() {\n    const { whitelist } = this.state;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          <h2 className=\"text-center\">Système d'une liste blanche</h2>\n          <hr></hr>\n          <br></br>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Card style={{ width: \"50rem\" }}>\n            <Card.Header>\n              <strong>Liste des comptes autorisés</strong>\n            </Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {whitelist !== null &&\n                        whitelist.map((a) => (\n                          <tr>\n                            <td>{a}</td>\n                          </tr>\n                        ))}\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Card style={{ width: \"50rem\" }}>\n            <Card.Header>\n              <strong>Autoriser un nouveau compte</strong>\n            </Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formAddress\">\n                <Form.Control\n                  type=\"text\"\n                  id=\"address\"\n                  ref={(input) => {\n                    this.address = input;\n                  }}\n                />\n              </Form.Group>\n              <Button onClick={this.whitelist} variant=\"dark\">\n                {\" \"}\n                Autoriser{\" \"}\n              </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}